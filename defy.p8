pico-8 cartridge // http://www.pico-8.com
version 34
__lua__
-- defy, a pcm boombox
-- by bikibird
-- thanks, @luchak and @packbat, for the sound advice
-- thanks, @gabe-8-bit, for help with the oscilloscope and testing
left,right,up,down,fire1,fire2=0,1,2,3,4,5
black,dark_blue,dark_purple,dark_green,brown,dark_gray,light_gray,white,red,orange,yellow,green,blue,indigo,pink,peach=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15


function header()
	mode=@(buffer+12)  --playback mode 1 (pcm) or 2 (adpcm)
	local title="Defy Player: "..chr(peek(buffer+13,51))
	extcmd("set_title",title)
	memcpy( 0x0000, buffer+64, 8192 )
end

function play_pcm()
	if not done and not pause then
		local defy_defy
		while stat(108)<1536 and stat(120) do
			receipt = serial(0x800, buffer, 512)
			defy_defy=chr(peek(buffer,12))
			if (defy_defy=="defydefy    ") then
				serial(0x800,buffer+512,8256-512)
				header()
				return
			end
			if (recording==true) update_audio_string(receipt)
			serial(0x808,buffer,receipt)	
		end	
	end	
end
function play_adpcm4()
	if not done and not pause then
		local request
		local sample
		local defy_defy
		while stat(108)<1536 and stat(120) do
			receipt = serial(0x800, buffer, 256)
			defy_defy=chr(peek(buffer,12))
			if (defy_defy=="defydefy    ") then
				serial(0x800,buffer+256,8256-256)
				header()
				return
			end
			for i=0,receipt-1 do
				sample=@(buffer+i)
				poke(audio_buffer+i*2,
					adpcm4((sample&0xf0)>>>4),
					adpcm4(sample&0x0f))
			end
			if (recording==true) update_audio_string(receipt)
			serial(0x808,audio_buffer,receipt*2)	
		end	
	end	
end
--modes={{playback=play_pcm,caption="➡️ play pcm"},{playback=play_adpcm4,caption="➡️ play adpcm4"}}

function record(lossy_option)  --add lossy vs lossless options
	audio_string=chr(lossy_option)
	recording=true
end
function escape_binary_str(s)  --https://www.lexaloffle.com/bbs/?tid=38692
	local out=""
	for i=1,#s do
	 local c  = sub(s,i,i)
	 local nc = ord(s,i+1)
	 local pr = (nc and nc>=48 and nc<=57) and "00" or ""
	 local v=c
	 if(c=="\"") v="\\\""
	 if(c=="\\") v="\\\\"
	 if(ord(c)==0) v="\\"..pr.."0"
	 if(ord(c)==10) v="\\n"
	 if(ord(c)==13) v="\\r"
	 out..= v
	end
	return out
end
function adpcm4(sample) --http://www.cs.columbia.edu/~hgs/audio/dvi/IMA_ADPCM.pdf, but adapted for 8 bit unsigned
	local index_table = {[0]=-1,-1,-1,-1,2,4,6,8,-1,-1,-1,-1,2,4,6,8}
	-- thanks @luchak and @packbat for advice on the step table.
	local step_table ={7,8,9,10,11,12,13,15,16,18,19,21,24,26,28,31,34,38,42,46,50,55,61,67,74,81,89,98,108,119,131,144,158,174,192,211,232,255}
	local delta=0
	if (sample & 4>0) delta += step
	if (sample & 2>0) delta += flr(step >>> 1)
	if (sample & 1>0) delta += flr(step >>> 2)
	if (sample> 8) delta = -delta
	new_sample +=delta
	if new_sample >255 then	
		new_sample = 255
	elseif new_sample < 0 then
		new_sample = 0
	end	
	
	ad_index += index_table[sample]
	if ad_index < 1 then 
		ad_index = 1
	elseif (ad_index > #step_table) then
		ad_index = #step_table
	end	
	step = step_table[ad_index]
	return new_sample
end
function update_audio_string(receipt)
	if #audio_string < 32000 then
		for i=0,receipt-1 do
			audio_string..=chr(@(buffer+i))
		end
	else
		recording=false
		printh(escape_binary_str(audio_string),"@clip")
		print("copied")
	end	
end	


function choose_playback(b) 
	if(b&1 > 0) then -- left
		mode=mode-1
		if (mode < 1) mode=#mode
	elseif(b&2>0) then -- right
		mode=mode%#modes+1
	end
	playback=modes[mode].playback
--	menuitem(_, modes[mode].caption)
	return true
end 
function choose_record(b) 
	if(b&1 > 0 or b&2>0) then
		recording=not recording
		if recording then
			menuitem(_, "➡️ recording")
		else
			menuitem(_, "➡️ not recording")
		end	
	end	
	return true
end 
--menuitem(1, modes[1].caption,choose_playback)
--menuitem(2, "➡️ not recording",choose_record)


visualizers=
{
	function() -- Wait for file
		cls()
		print ("\^pdrop defy file",10,50,11)
		print ("\^p     here",10,70,11)
		print ("https://bikibird.itch.io/defy",7,120,3)

	end,
	function() --Cover Art
		spr(0,0,0,16,16)	
	end,
	function() --Oscillocope
		cls()
		for i=0,127 do
			cursamp=128-(peek(modes[mode].buffer+(i*4))/2)
			if i==0 then
				pset(i,cursamp,11)
			else
				line(i-1,prvsamp,i,cursamp,11)
				pset(i,cursamp,11)
			end
			prvsamp=cursamp
		end
	end,
	function() --Bubble
		local hi=@(modes[mode].buffer)
		local lo=hi
		local sample
		for i=2,183 do
			sample=@(modes[mode].buffer+i)
			if (sample>hi) hi=sample
			if (sample<lo) lo=sample 
		end
		local r=35+sqrt(hi-lo)
		cls()
		local rsquare=r*r
		local ysquare,newx
		local x,y=r,0
		local delta
		while (y<=x) do
			tline(63-x,63+y,63+x,63+y,1,1+14*y/r,7/x)
			tline(63-x,63-y,63+x,63-y,1,1+14*y/r,7/x)
			tline(63-y,63+x,63+y,63+x,1,1+14*x/r,7/y)
			tline(63-y,64-x,63+y,64-x,1,1+14*x/r,7/y)
			y+=1
			ysquare=y*y
			newx=x+1
			if (newx)*(newx)+(ysquare) <= rsquare then
				x=newx
			else
				if (x)*(x)+(ysquare) <= rsquare then
				else
					x-=1
				end   
			end
		end
	end
}
function _init()
	audio_buffer=0x8000
	buffer=0x8800
	spare_spritesheet=0xb000
	pause=false
	done=false
	mode=1
	previous=0
	audio_string=""
	index=0
	recording=false
	new_sample,ad_index = 0,0
	step = 7
	visualizer=1
	modes={{playback=play_pcm,buffer=buffer},{playback=play_adpcm4,buffer=audio_buffer}}
end	
_update=function()
	
	if ( btnp(fire1) ) then
		pause = not pause
	elseif ( btnp(fire2) ) then	

	elseif (btnp(left))	then
		cls()
		visualizer-=1
		if (visualizer==1) visualizer=#visualizers

	elseif (btnp(right)) then
		cls()
		visualizer+=1
		if (visualizer>#visualizers) visualizer=2
	else
		
		modes[mode].playback()
	end


end
_draw=function()
	if (done) then
		visualizers[1]()
	else	
		visualizers[visualizer]()
	end	
end


defy=
{
--[[	auido string player (think of the binary string as a piece of audio tape,)
		defy:load"my audio string"  --clips are automatically assigned a number starting at 1.
		defy:cue(clip_number,start,stop,looping)  --start,stop, and looping are optional.
		defy:play() -- plays clip mode: 1=== lossless 2 === lossy 

		Typical use:
		_init()
			defy:load"my audio string" --clip 1
			defy:load"another audio string" --clip 2
		end
		_update()
			if (some_condition) then
				defy:cue(1)  -- cues clip 1 for play from beginning to end, no looping.
			end
			defy:play() --plays cued clip.  continuously call play in update function. 
		end
]]	
	clips={},
	load=function(clip,mode)
		add(self.clips,{clip=clip,start=2,stop=#clip, index=1, loop=false, done=false,new_sample=0,ad_index = 0,
		step = 7,mode=clip[1]})

	end,
	play=cocreate(function()yield()end),
	cue=function(clip_number,start,stop,looping)
		defy.play=cocreate(
			function()
				self.clips[clip_number].start=start or 2
				self.clips[clip_number].stop=stop or #clip_number
				self.clips[clip_number].loop=looping or false
				self.clips[clip_number].done=false
				yield()
				defy.players[self.clips[clip_number].mode](self,clip_number)
				yield()
			end
		)
	end,

	adpcm4=function(clip_number,sample) --http://www.cs.columbia.edu/~hgs/audio/dvi/IMA_ADPCM.pdf, but adapted for 8 bit unsigned
		local index_table = {[0]=-1,-1,-1,-1,2,4,6,8,-1,-1,-1,-1,2,4,6,8}
		-- thanks @luchak and @packbat for advice on the step table.
		local step_table ={7,8,9,10,11,12,13,15,16,18,19,21,24,26,28,31,34,38,42,46,50,55,61,67,74,81,89,98,108,119,131,144,158,174,192,211,232,255}
		local delta=0
		if (sample & 4>0) delta += step
		if (sample & 2>0) delta += flr(step >>> 1)
		if (sample & 1>0) delta += flr(step >>> 2)
		if (sample> 8) delta = -delta
		self.clips[clip_number].new_sample +=delta
		if self.clips[clip_number].new_sample >255 then	
			self.clips[clip_number].new_sample = 255
		elseif self.clips[clip_number].new_sample < 0 then
			self.clips[clip_number].new_sample = 0
		end	
		
		self.clips[clip_number].ad_index += index_table[sample]
		if self.clips[clip_number].ad_index < 1 then 
			self.clips[clip_number].ad_index = 1
		elseif (self.clips[clip_number].ad_index > #step_table) then
			self.clips[clip_number].ad_index = #step_table
		end	
		self.clips[clip_number].step = step_table[self.clips[clip_number].ad_index]
		return self.clips[clip_number].new_sample
	end,
	players=
	{
		function(self,clip_number)  -- lossless
			if not self.clips[clip_number].done then
				while stat(108)<1536 do
					for i=0,511 do
						poke (buffer+i,ord(self.clips[clip_number].clip,self.clips[clip_number].index))
						self.clips[clip_number].index+=1
						if (self.clips[clip_number].index>self.clips[clip_number].stop) then
							if (self.clips[clip_number].loop) then
								self.clips[clip_number].index=self.clips[clip_number].start
							else
								serial(0x808,buffer,i+1)
								self.clips[clip_number].done=true
								return true
							end
						end
					end
					serial(0x808,buffer,512)
				end
			end
		end,
		function(self,clip_number) -- lossy
			if not done then
				local c
				while stat(108)<1536 do
					for i=0,255 do
						c=ord(self.clips[clip_number].audio_string,self.clips[clip_number].index)
						poke (buffer+i*2,self:adpcm4(clip_number,(c&0xf0)>>>4),self:adpcm4(clip_number,c&0x0f))
						self.clips[clip_number].index+=1
						if (self.clips[clip_number].index>self.clips[clip_number].stop) then
							if (self.clips[clip_number].loop) then
								self.clips[clip_number].index=self.clips[clip_number].start
							else
								serial(0x808,buffer,i+1)
								self.clips[clip_number].done=true
								return true
							end
						end
					end
					serial(0x808,buffer,512)
				end
			end
		end
	}
	
}

--[[DEFECT DELETE function play_pcm_string()  --play from pcm string
	if not done then
		local i
		while stat(108)<1536 do
			for i=0,511 do
				poke (buffer+i,ord(audio_string,index))
				index+=1
				if (index>#audio_string) then
					if (loop) then
						index=1
					else
						serial(0x808,buffer,i+1)
						done=true
						return true
					end
				end
			end
			serial(0x808,buffer,512)
		end
	end	
end
function play_adpcm4_string()  --play from pcm string
	if not done then
		local i,c
		while stat(108)<1536 do
			for i=0,255 do
				c=ord(audio_string,index)
				poke (buffer+i*2,adpcm4((c&0xf0)>>>4),adpcm4(c&0x0f))
				index+=1
				if (index>#audio_string) then
					if (loop) then
						index=1
					else
						serial(0x808,buffer,i+1)
						done=true
						return true
					end
				end
			end
			serial(0x808,buffer,512)
		end
	end	
end
]]
__map__
100102030405060708090a0b0c0d0e0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
101112131415161718191a1b1c1d1e1f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
202122232425262728292a2b2c2d2e2f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303132333435363738393a3b3c3d3e3f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
404142434445464748494a4b4c4d4e4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
505152535455565758595a5b5c5d5e5f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
606162636465666768696a6b6c6d6e6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
707172737475767778797a7b7c7d7e7f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
808182838485868788898a8b8c8d8e8f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
909192939495969798999a9b9c9d9e9f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a0a1a2a3a4a5a6a7a8a9aaabacadaeaf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b0b1b2b3b4b5b6b7b8b9babbbcbdbebf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c0c1c2c3c4c5c6c7c8c9cacbcccdcecf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d0d1d2d3d4d5d6d7d8d9dadbdcdddedf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e0e1e2e3e4e5e6e7e8e9eaebecedeeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
11333313113321333303155d553131554535311c444494d411d3441515111167fd111151514435114d4942d43113535555131555c55131333312331131333c11
33313c13113c53551511353b351535514d343103aa4594a5333cbd131130116667111011b1cbd5334d5a44a9301d43d4351d3315b31511515531d31351331333
3135531113335311311111d3553531d3355d13c39599da131110c3bb1101106116110111333c0311534a99653c33dd353d1155553d311150105d331131513315
03dd551111d35333513133d35335555535dd13119b5d311110c3bcbc1c1111d11d111131cbcb3b111003d5b911115d5355333535333313353353c31111555d31
55d55510c1c151d11d301511131355d35dda3dd34331133103ccbb3313111111c11111c1b3cbcc1111533d351d336e555d551351513105131d35131131555e55
43453413111131313333011533515d55d554d5111011133033bcbbbb3311116116011133cbbbcb330313131031dd443955d551331110313c3511c11131515435
13455dc31c111150d31333016ddd55334349060131111011353b333cbc1cd076670dc1c3c333b3331300105110d145343545dd6d30313135153111c11c454435
dd4445111c1c3350353311334953d55435b13cbc133d01b033c13d11b31361e66e16313b10c33c5305113333bcb33bd3555d534435315155053011c1114553dd
5b3d33531101315155d553544533335311b3cbcc3c3113515333c31331cc61e66d16cc1351330335133113c3cccc3b113533535643355335351310113333d5db
63db51d3131133355315dd44455513131133bbbbbb33100015331311113b66deee66333111313355003035bbbbbb3b1130d55d5544da51553333111c5d11dd5d
d54a3a51d31351131333d5bd4464150011333b3b1313303153c13cd1333366deee6633351dc31c3113303131b13bc31131304d54d4d33313131311555563b45d
3553d523541551135155d45344651511113cc3333c33d3c33115cb33d33c66eeed6edc3d33bc5113d35c313d33bcd31100d15d4453db5515135531551d95b93d
55d3a445555ddd335355d533596d161111313c313d03311111d3c31353d16de66dd6333311cb3d111103303333b31301116166a413455531d355dd55545b3315
22d533455a35553d55153d307576151111313b11b10c151111d53cd33331c3667e3d3c31dccb53111131c13c11c1c3111111673613d35135315555a544455522
55554544443dd5d535355513d16d161111c11b11b13c53103131bc1101b3117217c1331010cb03131131b30311b033111161d71d31433555dd5555494455d554
555dd52334d344355d55350511111d1111c30335b11c1d333c1133d331cb13511d11c313c5c351c333d3313c3dc1c300c1d111113155555555d43b53354dd555
bb6d553551335334d135551010c161661d313333cdcb133311353333313b11110111b313333333115311cc1333301361d616110100514335533455115193bbdb
66f6f935335133e5445911111111616766cd535d13c33c513035c33d3cc3111121113cc3c35c330513c1bb33d3bddc666616111111119df4d4333333d3ee6f66
d655a43d3d3d35db44351111110166ee6e67cc3313313331333533bbbc1311dd5d1131bbbb3333d335331331d53c66e6ee661101111153d4dd1351d343d9d56d
dcd2eed5333313d555b3bb1311016ddede7633111131330335133dc3bb331351533133c33cd15033313c3d1111c367e66ed6101131bc3b5533313333ddef2dd5
d6d2eed63dd3133353c3333313116de6ee6e3d3b10d33c33c51b30c33c35135554313dc33c30d33c33c13311b3d366eeedd6111133c33cd5d331d3d1d6ed2d6d
f4e4de66df1513c131bcbcb3ccc361d6de6e3cc33b313313313333c3bb333345543333bbbc333303333313313bdc66eeee16ccc33bbbbc111353316d66eee44f
65fe6efe944ddf1130bcbbcccb3b6de6ee7ed1d13bbc3b31333333c3bcb31c3111c13bc33c33535313b3cbcbc311e7dd6ec6b3cbccbbcb1311f3a4a4ff6de45d
5b5463f6449b941331bc33131033c3666e7610c1333bcc33333b33ccbcb3133c3331bbcb3c333b3b33cc333311116767663d113030b3cb13514a4a45ffd6e534
1d33d34624445a1133bcc3351113c33dddd71111313dcc3b33cc3bb3bcb31d1111313cc3bcccbc3333bcd33311116ddd3d3c331133dcc31311954545a4dd3353
12d3d3a344943413013bbd1331533d3c1d11111131b3cbcc33cb3cccbcc313c33311bbbb3c33bc3cccccbb13111111113cd33d13d1c3bb3131434a443a133321
14c35353a9951511d3313333513313331c10d1353133b3bcd3bc3cc3bbbb313cc31cbcc33ccc3c33ccbb3313532d0111c3315313311b03131150444935c53343
3435335c4459331031533d3c1cd3153b1111dd01c5b3b3cc3cc3ccc33bcbb3b3bb3bb3b33cc3ccc3cc3b3b1350d311313c5013c1c3333313113394a4333c53d1
35153133ab35130131531331c33301b31311514533b33bcb3cc3ccc33ccbbbb333c3bcb3cccc33ccbb3bdb534d5311313c1133bc3c515515013041bdc1113153
35331115d1131100011013d3b31c11c3c311d0441dc13bbbcc3cccc3bbcbbb3333bbbbb33cc3c3c33b3b1313441d11333b113133513111110111313331315555
5dd53535c110313311c1535dc33b1cb3133353543111b33bbb3cccc333bbcb1331bcb333ccccc3bcb33c13135d3513333c31cd3cd3350c303313111d3d335555
4544dd330c1130350533111131c333bc333313331311c1bbb3ccc3c3b3bb131000c1bb3b33ccbcbbbb13113133313333c333331303115300531313c1d1dd4455
3d3364dd05333b333513113131d53ccbbb333311c3bcc3cc3bc3c333b3c313300330bc3bc33c3c33ccbccc3c31b133b3bbcb3c131511c153333333511b4e335d
5335454433ccbc53511d11313d3333c33cb3cb113cb3b3bbbb33331c33cb10111110cc3b313133bbbbbbbb3311bc33cc3c333335331131133dcbcc534534d335
d3d59434ccbc333c0313113c10310cc3bc5b3b11bbb3bbbbb33b1001333b11113103b1333011b33bbb3b33c311bcb3cb3cc10b13c11111513333cbcc43d95435
1555d5b5bbbbc3331c3d311330133033cc3ccb333c3bc3ccbb3b0b33bb1c10c11101c13b33333bcbcc33b3bb333bb3cc3b00330351133533333cbbbbdbd53555
55333531cbcb3bdbcb33113135d53333cbbbb33bb3130110c3bcb333330c1011c111303b3333db3b10133133c33bcbcc33131335131335ccc3cb3bbb13351135
54555511b3331311c3c3333353bc3333c3cc3bccb333010000c33bb3b30c131cc111c03c33333c11001033bbbc3bcc3b3333cd3353333c3c51103bc311d55555
545d1d11c1331311c13b3c1d1b3033c333cb3bbbbb0c301303103c33b00c1111c111303b53cb03103113c0bcbcb3bcc3b33303d3d3c3bb1311313c1d1131d555
5d33131113b31b31131133c33b31b3bcc3ccbcc3cb0311111101c133b30c111c1111c033331c1011110030bbbbc3ccc3cc3b13b3313bc13113b13313013153dd
3553000111c11b30351c313d0333b3cc3c33bcb3bb0330c11103303c330b1011c101c05bb30c10111c1330bb3bcb33cccb3b3330c313d13303c13b1111003553
143d13111131c3d03d0333b3333333cccc3c3cb3cb1311c1c111303b333b111cc111b333bb0113111c1130bc33ccc3cccbc333333b1531d31dbb13111111b3d1
44d61d0111c13ccb150131bccccc3333c3cccc33b31c11c1111111b3b3c300111101bcb33301c111111131bb3333ccc33333cccccb03013133c31d1101d19644
5565d611110051333bcb3b3bccccccc333cc3333bb0c301111cc01b3dbbb13c11c31bbb33b1011111c11c13b35cccc33c3cccccb3bbcbcd3cc111011116c5654
44646611d1677666c3c33b33bbbbccccccc3cc03333c11c1111111c13bbc1b111130c3b31c101c111c01c33b30ccc3c3cccbbb3b3bb333c37d76761d11e65654
436466c666666e76c513d33333b3bbbbcb3cc311b3bb01111c1111b03bc33b1111b33bb33b1111c11110b3333333cccccb3b3b333333c33d6fee66666d664654
3365151166eede6e1d111131333b33b33333133033c31310c1111cc13b30c31331cc13c31bc1111c11c03c33103133b33b3bb3331c1111d167deee6611d15c33
331111c16ddedeeed71011333cbbcbbbbb3b33333333cc10101c1cb0cb31b31bb1c313c11b111c1110c333bb3333333bbbbbbb333311017de6deded61c111153
5311110172e6eeee661111503331c3c3bb3b3b333333b333011111c13ccccccbbcbcccc31b111c01c1bb330333b3bbbb3ccc131c15151166eeee6ed711110133
3d0011111066e666c611dd43311131bb3bbbbcbb3b3033cb131111b0ccbcbb3b3bbbbccc1b1101b1bc3303b3cbbcbbb3bc1311115445116c67ee6601111110d3
15110111c16166d6102155453211cc33cc3c3c3ccc3b33bbbb3b11c1bbbbbb33b3bbbbbb1b1133bb3b53bbcc3333ccbc3b3c115344d311106d6e161c11111151
15111111cc33dd11111053d43d31bbbb3b00010110c33b33cc33c3bbbb3bc13ccc13b333ccbc3bcc333b3c03010100b3bcb31c5355530111c13cd31c111111d1
15313c333bc33ccc1c11115331c33333111013110131bb3b31c3cb3bc33c333013d333bcb3bb3c33b3bb030011130131b33333131d15111133333cc33cc31151
35bc33c313313db33311331313b1b313011311111101c1cb13c3bb3333b13d1110d33cb3b3c33c11bc1c10111111110030bb1c31313311c33cc105b33b33cb53
b4bbb33c115331303c13d33313c1333b311311c11111303b0cccbbbc3c111111111113c5c3bbccb1bb0111c1c1113111333333313c5333b303d33301c33bbb4b
c5ccbb1311333d10333333cb3b313b3c0011cc11c11c10b33bbcbb130111113c33111110313bcbc33b10c11111cc1110b3cb13c33b33333c1133d50111bccc5c
34c33b3d113d3300c1bb3333cb3cbcbb0111111111111c30cbbc333d11331d311531331033bdcbbb13111111111c1110bc3bc3bb3bb3b31c11353511b3bbcb53
13cc3bbc33cc1c3233ccb333b3bbbccb0311111c11111111bcbb3bc3113335313351331133b33bcb111111111c1101313bccbb3333c3bc3313c1cc33cc33cb31
11bb3c3ccc333bc3b3bbccbc3bb3bbbc3c0011c11ccc1c01b3331c13d13333c1133c1d1c31c1333b10cccc1c111101c3bbbb3bbbcbccbcd313bb3b3c35b13c10
1131bc503331cc333c31cccccc3bb3bbcb13101111011111c3b31c11111113111131131311333c3c11101011111130bcbb33cbccccbb333333cc11333dcc3331
0131303d013111333113b3cbcbcc3bb3bbbc0300000030b3bbb33d301d131111111111c113c13bbb3b1300000111ccbb3bc3bcbc3b3331331c33151131335310
1531333333351135cb30333333cbcc0333c3cc3333bcbbcc3ccb0331331c1111111131331530bccbbc3bcb33cccc3b3333cb3c3cc33301c31311353333331151
351155101d103513313033cccc33333c033bb3cbbcbbccb3bc3b31d1331331c11c13d1331d31b3cbc3bcbb3b3333b330333c33333c331333533310d001551131
0101100313113131353d33bbcccccc3c03333333bb3c13c1bbc31311d31311cccb11311311313dcb0cc1b3b333b33330c3ccccccbc3cd3530333113153011013
330311051c1131513b3dc3cccccccc3311b3331333cb13c13bbb3311111311bccc1011dc1133bcbb0c31cc3b33333330ccccccccbcbcd353031c11c110111013
051133001c1133151133b3bb3333c13c313333bbbbbbcbcb3b3c11c1c31331c11c1331331c31b3c3bcbcbb3bbb33b30313313333bb333113333511c100330051
15113533355111333b0033333ccc3c13b3b3cb33c3b3bbcbbccb1331351c1110011131351311bcbbbbbbbcc3c3bc333333cccc33333301bb1311113153351351
0333313510313131b31333c3ccbc3bbbbbcc1111001131b3bbc31b311c131131331131d113c133b3bc1c10001030bcbb3b3bcccccc33311c3331355033133311
1101bb313331cc333c33cccccb3b333bbb03011011111131cdb31311111113111131111c11b03b3c010010111110303cb333bbcccccc33c333cc1333353b1310
03c33b3ccc3333333dc3bcccbbb3cbbbcb011111c1111101b3331c1311333d311331331c31c1333b11c1111c111110b3bbbb33bbbcbc3c33333b333cc3b13c11
03cc5bb335cb133135bbcbbb33cbcbcb031111c111111c11bcb33b33113331c135c1d31133b53bcc10c111111c111131bcccbb33bbbcbc331531bc333cb3cc31
1dbcbb3c15d1d311c13c33b3bb3cbbbb0111c11111c11131cb3b3bcc113d3d31335c33113db3c3bb13111111111c1110bccbc3bb33b3b30c1133c111d3bbcb51
c4bbc313103c3c10b3b333b33b313c3c0113c111111c11b1cbcc3b131111113c3d111111313dcbcb3b11cc11111c3110b3bb33b3bb33333311c5d31131bcbc5b
b4ccbb5310333510bb13b3c31131b31b01111cc1cc11113b3ccbbbcc3330111111110133ccbbccc3bb0111cc1c1c113031b313113c3333cb03533311333bbcdb
39bb33cb1b511db33c1dd11313c1bb13011311111111c1cb13c1bcbb3bc1331111c31d3c3bcb3c10bc1c001111111131b0333c11315511b33b551d30bcb3bb43
0d313c33bb33bc3c1d111115c3b3b333031011110110bb3b10b3bb33c33cd31113c3333c33bbcc33b3bb011011110110c33b3b31353111d1333c33bb3bc31151
151111c1cc3cdd3311113d4515313c3b3c01101010c33b33bc33cc3cb33b33333303b3bbcbbcbbcb3333cc01111010333b3b1c134d5111111cd63cc61131d151
35111111116567d6011135453511b3b3bbc31333ccbc33bbbbbc33b3bb3bcbcbcbbbbb331b1333bbbbb3bb3c1331c3cb3b3c135144d301116d66361311111151
3501101110676676d6115dd5151131cdbbbbccbcbc3333b33c0101c1ccbc3b3b333bbccc1c1100333c3331c3ccccbbbbcb1311515d43116d6666761111110133
1c1011117567edee66115230313333bcbcbbbb333333b33c101111b0bbccbcdbbccbcccb1b111101b33b3333bbbbbbcc3b33133303251166eeee6ed7111111d1
331111116dedee6dd7101133c3cbcbbbbb333333b3303b0010c11cc13c31bc3cb3cb13b31bc1c10111bc333b033333bbcbbcbb3c1311007dd6ededd611111133
33cd131167eeed6e1d1111313b3b3b3b3333033033c31c11c11111b03b31bb1330bb13c31b10111101303c530353333bbbb3b33353111161eeeeee661111dd33
45646ecc666edee6cc11c13153333bcbcc3cc30335cb0011111011c13bc33b1111333cb31b1111c11111bc333033c3ccbcb3333333d3ccd166ee6d66dd66d654
42656612d167e6d633c33333bbcbcbcccbc3cc033b3b30c111c111b1cbbc1b1111b1cbb33c111c111101b33330cc3cb3ccccbbb3333333c36d66761dc1665654
54d4d7111110313c3cc3bb3bcccccccbc3cc3c33331c301111c101c33bbb13c11131bbb33b1011111c11c0bb353ccc3cb3cbccccb3bdbcc33313111111ed5654
54d41d1111113c333d1113bcbcbc3b33c33c3c33bb031011c11c11b333cb1011c1003c33cb11c1111111303b333ccccc3c3ccccccb0c0133cdc3111111d14d54
345d1311113133313d1331b3333333ccccc3cc33b31c11ccc111103c331b101cc101b333c300111c1c11c0bb3b3c3ccc3333b3b33b1331551d331c1111115d53
3533001111c13c31351d31331333c3bcc3333cb3bb031111111130bc331c10111101c13bb30311111c1130bc0bcb1ccccc3c33303313313d03b3131111111353
dd35151011310b315311b03c1b31b3cc3cc3bcbbb30c10c11111c133b30c111cc111c03b331c01111111313b3bcb3c33bb3b13c3c33d31330dc1cb1101105363
455d1d11c1330321c1bcbc1d3c3133bb33cc3bcbbb0c31111111bc33b30c11111111303333cb1111111130bcbbb33c3ccc3b11b031b3c3131131331c1131dd54
545335113cc33311b3c333333333333cc3cc3bbb3b0c001001b13c333303111cc111c0333bc33c10110133bbbcb3cc3c3333cb3553c33ccb11133c33115d3555
55533331bbb3333dcc33115153c55133c3bcbbccbc3b1310c1cc3333b30c10c1c111c03b33b3cb13010133c3c33bcb3c33133d33351133ccc33b3bbb13335d55
1555453dcbbbc3b33c55311d30151033ccbbb3033b3b33bcbcbb0b33331c11c11110c03b3030bbcb3c3cb3b333bbb3cc331030053151d531333cbbbc5c5e1155
33554d34ccbc333d1133113c31b31bc3cc3bcb113c33bbbbb33b1003b33c10111c01b1333011b3bbbbbb3bc311bcb3cc3cb13c35c31131313d31cbbc4d545433
5555a554b3cc3b33351d11b1151333c3bbb33b11bbb333cbbb333313b33b01111111c33b353333bbbb33333b11b3b3bb3c3333111311311533bcccd355395335
5533dd6513333b330d1d113131c53ccb3b333311c3c3cdcc3b33cc3c33cb03110110bc3bc33c3333ccbccc3c13c333b3bcdb33351511c13333b3bc303dde5355
d5d4d5351351513501331111303333bc33c315331531b1bb3b3c3c3cb3bb1c0011c1bb3b33cccc3bbb131331133133b3c333331311111110d515113133dd445d
5d54335d3111333305c1133dc33c33bc3333131d3311c33bc33ccc3c33bbbb0333b3bb33ccccc33bb33c11135d353333cb33cd3c33351c313333101335d34555
353335113110111111101351b3130535d311404411b1bbbbbcc3ccc33bcbb33cb03bbbb33cc3c3ccbbbb1311450411351310b133553101110010311313313335
351d3133ac5d0110303311c3c31311b3133133e413bc33c3cc3c3cc33ccbbbb33bb3bcb33ccc13bc3cb3cb534d3311313b11c1bc1c513303111145cac3135555
3433d35c46d933013355333c3cd3033b1c21dd0333b3b3bc3bc3ccc1bbcbbb3333bcbcc33cccccc3cc3b3b13316511313c313c31c333553330339d44d53333d3
1433334394951511533033333133133c1310d11d3333b3cc3ccc33c3bccb31bcb30cbccb3cc3c333cc3b333c535d00c1c351351333330335115144493b131d43
15d355a544a4351113cbc31dc1d53dd31c1001113333ccbc33bcccc3bc3b13b33c31bbb33cc33c33cbbc331511111111b3d3351331cdb311114349445a3d3311
1533cd464454491111bb33331033c353dd660111513bcb3c33bc3cc3bb331c3111313bc33c33cb3bc3cc3b3301107ddd3d3c33113d3cc3131194444564cd3355
d3dd65af4494a40331bcb3111110d367767e11113333cc3bb3bb33c3bcb3133333c13cbb3ccccb3b33bc3b3311016766663d111131b3cb13314a5a44ff36ddd5
f3a966f6a4453a3031cccb3cbb3b6c66ee76103ccbcb3b11333333ccbcb31c1115b13bc3bc33333311b3bcb3d31ce7ee76c6b3cbc33bcb0301a5a44a6f66e95e
e4eeed6fb633333d01cbbbbb3cdc73e6ed661cb33c313b1b303133c3bb33335dd43333cb3c333301b1331cc33c1366ee6e16c3b33bbb3c313333136d6feede4f
d6d5e8dd563313513dbc3b333d1371e6edee3d3c01331cb3631b11c3bcb3134552313dbbbc11d03c333c3b1133d366deeed7c1d133bbbcdd133133b5dd8e5e6d
d6d2eddd135313c343b3cc1c11116deeee663c0111d13313351333b33c533133353133c33c3330333333131030dce7eeddd61011c1bcbc35d331333d5ddf52dd
5655ee14331c13dd44120013110166eded663c351331d33335353cb33b531165561131bb3b3133d335135331533366e6ed66101111114344cdd1c333d349dd6d
66fde4345c3333dd4f541311111171e666dcd33dd3c33cd03031d333bcd31111111133c3b33c531515c13c33d33ddc666e171111111141d45d3511d3d1eeded6
dc6bd5351313d554515d130111116166163133d333cb03333153333c313b11100111c313d3c353133331bc1c3d313361661611111031d534d53553335145bddd
db5db35552534d325d55d50311111c11103c1bd3c1333d35dc3133d3313c1c500d11b313c33351335351333c33b1c31111c1111131555555555415555156d3bd
555d54444455555553533500117c161111c11b1131dc13113111cc1111b3117557c13c1111cb011311533d1311c11b011161c61d115335553d543d444453d455
225555444935553353355d337d76111111311c11c13c1311105333d313b31c66663d33351dcbd3111131c13c11c01b1111d1e63613d15533535d534444455d45
3053444bd545d45b5554d453446d161111333b313b03501110d5cc3353316de7eed6333513cb55111111313303b3c3111161d64d3d435554554bd555ba453311
514d5a435533d3c53351d513d4641d11113cc3c33353c3c35115bb33d3bc66ee6e66cc1d13cc3313c33331333cbc131110d1dd4435dd353333d3535555943915
d45b3a41351531101135d5dd44d411001131b31b1333103013c13bd1533366deee6633331cb3133113113331b33b331111114d54dd5555111105315315b3d556
d35a13d33d11333d5535ad455355131311b3cbbbc353111013331311113366dede66330111c11351010135bbb3cb3b1130315d54443a5355353311d33d15ba5d
3d3d535513013131553553554433d3531133cccb3c3303033533331c30cb61e66ede3c1310333333113113c3cccc3311353d3354353d5135151310315513d1d3
bd5455131c1c0350351d333344d355151d333cbc033510b135c13c01cb1361e66d1e31bc13db3d530331d133cbbb5bd1511d1d4d3530d113153111c1314d45b6
53545d331c11115133131111da5655354d54360133110031331b333cbc1dd176671d31bcc333c3530300111110c0455d5345d54a30513153150111cc11455531
41453411111131553333111333555d55d559d4130111135113bcb33b3311106116111133c33bcb3313051100314b445dd5d535331331333c35131c1131d54454
5d455411113c31515d311111333155d334da33333533130133cc3b3bc31111111c1111d1b3bbcc5311b0c3533d356a453d551333511313355313131131553d55
33dd5511111c533333b033355535155535dd55119dd4351110c3cccb130111d11d111131bbcc3b01305c94b41111dd35353553d23d3003135153c31111455535
51353311113c3315153101c355153133d53d11c34a99f4151130b3cb1101116116111111bc3c13104194a4a45c33dd353513355533310355153d33c111533313
33313313113c5555100133bd513333554d353113949495a45353b60c1111116666110111b16c5353464a44443111d3d455135135cd3511113535c31110331331
11333c1511331131b311153d5551113d4435353ca45595d511d34535111111d66d11111151543b114c59445ac333535455133351355110b313123311313c3311
